// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/buildpacks/lifecycle (interfaces: DockerfileApplier)

// Package testmock is a generated GoMock package.
package testmock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	extend "github.com/buildpacks/lifecycle/internal/extend"
)

// MockDockerfileApplier is a mock of DockerfileApplier interface.
type MockDockerfileApplier struct {
	ctrl     *gomock.Controller
	recorder *MockDockerfileApplierMockRecorder
}

// MockDockerfileApplierMockRecorder is the mock recorder for MockDockerfileApplier.
type MockDockerfileApplierMockRecorder struct {
	mock *MockDockerfileApplier
}

// NewMockDockerfileApplier creates a new mock instance.
func NewMockDockerfileApplier(ctrl *gomock.Controller) *MockDockerfileApplier {
	mock := &MockDockerfileApplier{ctrl: ctrl}
	mock.recorder = &MockDockerfileApplierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDockerfileApplier) EXPECT() *MockDockerfileApplierMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockDockerfileApplier) Apply(arg0, arg1 string, arg2 []extend.Dockerfile, arg3 extend.Options) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockDockerfileApplierMockRecorder) Apply(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockDockerfileApplier)(nil).Apply), arg0, arg1, arg2, arg3)
}
