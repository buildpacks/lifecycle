name: draft-release

on:
  workflow_dispatch:

jobs:
  draft-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install jq
        run: |
          mkdir -p deps/bin
          curl -s -L -o deps/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
          chmod +x deps/bin/jq
          echo "${PWD}/deps/bin" >> $GITHUB_PATH
      - name: Derive lifecycle version from branch name
        run: |
          [[ $GITHUB_REF =~ ^refs\/heads\/release/(.*)$ ]] && version=${BASH_REMATCH[1]}
          if [[ -z "${version}" ]]; then
            echo "lifecycle version not detected."
            exit 1
          fi
          echo "LIFECYCLE_VERSION=$version" >> $GITHUB_ENV
      - name: Determine download urls for linux and windows
        id: artifact-urls
        uses: actions/github-script@v3.0.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            return github.actions
              .listRepoWorkflows({
                 owner: "buildpacks",
                 repo: "lifecycle",
              })
              .then(workflows_result => {
                let workflows = workflows_result.data.workflows
                  .filter(a => a.name === "build" && a.state === "active")
                  .map(a => a.id);
                if (workflows.length === 0) {
                  throw "no active workflows found with name build"
                }
                return workflows[0]
              })
              .then(workflow_id => {
                return github.actions.listWorkflowRunsForRepo({
                  owner: "buildpacks",
                  repo: "lifecycle",
                  workflow_id: workflow_id,
                  branch: "release/${{ env.LIFECYCLE_VERSION }}",
                  event: "push"
                })
              })
              .then(workflow_runs_result => {
                let workflow_runs = workflow_runs_result.data.workflow_runs
                  .filter(run => run.conclusion === "success")
                  .filter(run => run.head_sha === "${{ github.sha }}");
                if (workflow_runs.length === 0) {
                  throw "no successful workflow runs found for commit"
                }
                return workflow_runs[0].id
              })
              .then(workflow_runid => {
                return github.actions.listWorkflowRunArtifacts({
                  owner: "buildpacks",
                  repo: "lifecycle",
                  run_id: workflow_runid
                })
              })
              .then(artifacts_result => {
                let tuples = artifacts_result.data.artifacts
                  .map(artifact => [artifact.name, artifact.archive_download_url]);
                let urlMap = new Map();
                tuples.forEach(function(tuple) {
                  if (tuple[0].includes("linux")) {
                    urlMap.set("linux", tuple[1])
                  }
                  if (tuple[0].includes("windows")) {
                    urlMap.set("windows", tuple[1])
                  }
                })
                if (urlMap.size === 0) {
                  throw "no artifacts found"
                }
                if (urlMap.size != 2) {
                  throw "there should be exactly two artifacts"
                }
                return Object.fromEntries(urlMap.entries())
              })
      - name: Download linux artifact
        run: |
          url=$(echo '${{ steps.artifact-urls.outputs.result }}' | jq -r .linux )
          curl -sL -w 'RESP_CODE:%{response_code}\n' \
            --header 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            -o artifact-linux.zip $url
          mkdir artifact-linux
          unzip -d artifact-linux artifact-linux.zip
          lifecycle_path=$(ls artifact-linux/lifecycle-*linux.x86-64.tgz)
          echo "ARTIFACT_LINUX_PATH=$PWD/$lifecycle_path" >> $GITHUB_ENV
      - name: Download windows artifact
        run: |
          url=$(echo '${{ steps.artifact-urls.outputs.result }}' | jq -r .windows )
          curl -sL -w 'RESP_CODE:%{response_code}\n' \
            --header 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            -o artifact-windows.zip $url
          mkdir artifact-windows
          unzip -d artifact-windows artifact-windows.zip
          lifecycle_path=$(ls artifact-windows/lifecycle-*windows.x86-64.tgz)
          echo "ARTIFACT_WINDOWS_PATH=$PWD/$lifecycle_path" >> $GITHUB_ENV
      - name: Set pre-release kind
        if: contains(env.LIFECYCLE_VERSION, 'rc') # e.g., 0.99.0-rc.1
        run: |
          echo "RELEASE_KIND=pre-release" >> $GITHUB_ENV
      - name: Set release kind
        if: "!contains(env.LIFECYCLE_VERSION, 'rc')"
        run: |
          echo "RELEASE_KIND=release" >> $GITHUB_ENV
      - name: Set release body text
        run: |
          cat << EOF > body.txt
          # lifecycle v${{ env.LIFECYCLE_VERSION }}

          Welcome to v${{ env.LIFECYCLE_VERSION }}, a **beta** ${{ env.RELEASE_KIND }} of the Cloud Native Buildpacks Lifecycle.

          ##  Prerequisites

          The lifecycle runs as a normal user in a series of unprivileged containers. To export images and cache image layers, it requires access to a Docker daemon **or** Docker registry.

          ## Install

          Extract the .tgz file and copy the lifecycle binaries into a [build stack base image](https://github.com/buildpack/spec/blob/master/platform.md#stacks). The build image can then be orchestrated by a platform implementation such as the [pack CLI](https://github.com/buildpack/pack) or [tekton](https://github.com/tektoncd/catalog/blob/master/task/buildpacks/0.1/README.md).

          ## Lifecycle Image

          An OCI image containing the lifecycle binaries is available at buildpacksio/lifecycle:${{ env.LIFECYCLE_VERSION }}.
          EOF
      - name: Create Pre Release
        if: contains(env.LIFECYCLE_VERSION, 'rc') # e.g., 0.99.0-rc.1
        run: |
          gh release create v${{ env.LIFECYCLE_VERSION }} \
            ${{ env.ARTIFACT_LINUX_PATH }} ${{ env.ARTIFACT_WINDOWS_PATH }} \
            --draft \
            --notes-file body.txt \
            --prerelease \
            --target $GITHUB_REF \
            --title "lifecycle v${{ env.LIFECYCLE_VERSION }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        if: "!contains(env.LIFECYCLE_VERSION, 'rc')"
        run: |
          gh release create v${{ env.LIFECYCLE_VERSION }} \
            ${{ env.ARTIFACT_LINUX_PATH }} ${{ env.ARTIFACT_WINDOWS_PATH }} \
            --draft \
            --notes-file body.txt \
            --target $GITHUB_REF \
            --title "lifecycle v${{ env.LIFECYCLE_VERSION }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
