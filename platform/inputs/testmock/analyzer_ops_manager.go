// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/buildpacks/lifecycle/platform/inputs (interfaces: AnalyzerOpsManager)

// Package testmock is a generated GoMock package.
package testmock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	lifecycle "github.com/buildpacks/lifecycle"
	buildpack "github.com/buildpacks/lifecycle/buildpack"
	inputs "github.com/buildpacks/lifecycle/platform/inputs"
)

// MockAnalyzerOpsManager is a mock of AnalyzerOpsManager interface.
type MockAnalyzerOpsManager struct {
	ctrl     *gomock.Controller
	recorder *MockAnalyzerOpsManagerMockRecorder
}

// MockAnalyzerOpsManagerMockRecorder is the mock recorder for MockAnalyzerOpsManager.
type MockAnalyzerOpsManagerMockRecorder struct {
	mock *MockAnalyzerOpsManager
}

// NewMockAnalyzerOpsManager creates a new mock instance.
func NewMockAnalyzerOpsManager(ctrl *gomock.Controller) *MockAnalyzerOpsManager {
	mock := &MockAnalyzerOpsManager{ctrl: ctrl}
	mock.recorder = &MockAnalyzerOpsManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnalyzerOpsManager) EXPECT() *MockAnalyzerOpsManagerMockRecorder {
	return m.recorder
}

// EnsureRegistryAccess mocks base method.
func (m *MockAnalyzerOpsManager) EnsureRegistryAccess(arg0 inputs.ForAnalyzer) inputs.AnalyzerOp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureRegistryAccess", arg0)
	ret0, _ := ret[0].(inputs.AnalyzerOp)
	return ret0
}

// EnsureRegistryAccess indicates an expected call of EnsureRegistryAccess.
func (mr *MockAnalyzerOpsManagerMockRecorder) EnsureRegistryAccess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureRegistryAccess", reflect.TypeOf((*MockAnalyzerOpsManager)(nil).EnsureRegistryAccess), arg0)
}

// WithBuildpacks mocks base method.
func (m *MockAnalyzerOpsManager) WithBuildpacks(arg0 buildpack.Group, arg1 string) inputs.AnalyzerOp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithBuildpacks", arg0, arg1)
	ret0, _ := ret[0].(inputs.AnalyzerOp)
	return ret0
}

// WithBuildpacks indicates an expected call of WithBuildpacks.
func (mr *MockAnalyzerOpsManagerMockRecorder) WithBuildpacks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithBuildpacks", reflect.TypeOf((*MockAnalyzerOpsManager)(nil).WithBuildpacks), arg0, arg1)
}

// WithCache mocks base method.
func (m *MockAnalyzerOpsManager) WithCache(arg0, arg1 string) inputs.AnalyzerOp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithCache", arg0, arg1)
	ret0, _ := ret[0].(inputs.AnalyzerOp)
	return ret0
}

// WithCache indicates an expected call of WithCache.
func (mr *MockAnalyzerOpsManagerMockRecorder) WithCache(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithCache", reflect.TypeOf((*MockAnalyzerOpsManager)(nil).WithCache), arg0, arg1)
}

// WithLayerMetadataRestorer mocks base method.
func (m *MockAnalyzerOpsManager) WithLayerMetadataRestorer(arg0 string, arg1 bool, arg2 lifecycle.Logger) inputs.AnalyzerOp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithLayerMetadataRestorer", arg0, arg1, arg2)
	ret0, _ := ret[0].(inputs.AnalyzerOp)
	return ret0
}

// WithLayerMetadataRestorer indicates an expected call of WithLayerMetadataRestorer.
func (mr *MockAnalyzerOpsManagerMockRecorder) WithLayerMetadataRestorer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLayerMetadataRestorer", reflect.TypeOf((*MockAnalyzerOpsManager)(nil).WithLayerMetadataRestorer), arg0, arg1, arg2)
}

// WithPrevious mocks base method.
func (m *MockAnalyzerOpsManager) WithPrevious(arg0, arg1 string) inputs.AnalyzerOp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithPrevious", arg0, arg1)
	ret0, _ := ret[0].(inputs.AnalyzerOp)
	return ret0
}

// WithPrevious indicates an expected call of WithPrevious.
func (mr *MockAnalyzerOpsManagerMockRecorder) WithPrevious(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithPrevious", reflect.TypeOf((*MockAnalyzerOpsManager)(nil).WithPrevious), arg0, arg1)
}

// WithRun mocks base method.
func (m *MockAnalyzerOpsManager) WithRun(arg0 string) inputs.AnalyzerOp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithRun", arg0)
	ret0, _ := ret[0].(inputs.AnalyzerOp)
	return ret0
}

// WithRun indicates an expected call of WithRun.
func (mr *MockAnalyzerOpsManagerMockRecorder) WithRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithRun", reflect.TypeOf((*MockAnalyzerOpsManager)(nil).WithRun), arg0)
}

// WithSBOMRestorer mocks base method.
func (m *MockAnalyzerOpsManager) WithSBOMRestorer(arg0 string, arg1 lifecycle.Logger) inputs.AnalyzerOp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithSBOMRestorer", arg0, arg1)
	ret0, _ := ret[0].(inputs.AnalyzerOp)
	return ret0
}

// WithSBOMRestorer indicates an expected call of WithSBOMRestorer.
func (mr *MockAnalyzerOpsManagerMockRecorder) WithSBOMRestorer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithSBOMRestorer", reflect.TypeOf((*MockAnalyzerOpsManager)(nil).WithSBOMRestorer), arg0, arg1)
}
